package com.spring.biz.view.board;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.servlet.ModelAndView;

import com.spring.biz.board.BoardService;
import com.spring.biz.board.BoardVO;
import com.spring.biz.board.impl.BoardDAO;


@Controller
//@SessionAttributes({"board", "user"})
@SessionAttributes("board") //board라는 이름의 Model 있으면 session에 저장 
// 단, 현재 위치(클래스)에서만 유효
public class BoardController {
	@Autowired
	private BoardService boardService;
	
	public BoardController() {
		System.out.println(">> BoardController() 객체 생성");
	}
	
	
	/* 메소드에 선언한 @ModelAttribute
	 * 메소드에 저장한 데이터를  @ModelAttribute 어노테이션에 의해
	 * view단에서 사용할 데이터로 전달? 
	 * 다른 요청처리 메소드 실행 전에 해당 메소드가 먼저 실행됨
	 */
	// 메소드 정의부에 선언된 @ModelAttribute는 리턴된 데이터를 View에 전달
	// @ModelAttribute 선언된 메소드는 @RequestMapping 메소드보다 먼저 실행
	// 뷰(View)에 전달될 때 설정된 명칭 사용 (예: conditionMap)
	@ModelAttribute("conditionMap")
	public Map<String, String> searchConditionMap() {
		System.out.println(">> Map searchConditionMap() 실행");
		Map<String, String> conditionMap = new HashMap<String, String>();
		conditionMap.put("제목", "TITLE");
		conditionMap.put("내용", "CONTENT");
		
		return conditionMap;
	}
	
	//리턴타입 : ModelAndView --> String
	@RequestMapping("/getBoardList.do")
	public String getBoardList(BoardVO vo, Model model) {	
		System.out.println(">> 게시글 목록 보여주기");
		System.out.println("vo : " + vo);
		//1. 게시글 목록 조회 (SELECT)
		//List<BoardVO> list = boardDAO.getBoardList();
		List<BoardVO> list = boardService.getBoardList(vo);
		//3. 목록 화면 이동
		//mav.addObject("boardList", list); //Model에  데이터 저장
		//mav.setViewName("getBoardList.jsp"); //View 명칭 저장	
		model.addAttribute("boardList", list);
		return "getBoardList.jsp";	
	}
	
	//GET, POST 방식 요청을 모두 저리
	@RequestMapping("/getBoard.do")
	public String getBoard(BoardVO vo, Model model) {		
		System.out.println(">> 게시글 상세 보여주기");
		System.out.println("boardService: " +boardService);
		
		BoardVO board = boardService.getBoard(vo);
		
		model.addAttribute("board", board);
		System.out.println("board : " + board);

		return "getBoard.jsp";	
	}	
	
	
	@RequestMapping("/insertBoard.do")
	public String insertBoard(BoardVO vo) {
		//Spring에 의해 BoardVO vo에 요청url의 파라미터들 의존주입되고 있는 것
		System.out.println(">> 게시글 입력");
		System.out.println("vo: " + vo);
		boardService.insertBoard(vo);		
		return "getBoardList.do";
	}
	
	@RequestMapping("/updateBoard.do")
	// @ModelAttribute("board") BoardVO : board라는 이름의 Model 객체가 있으면 사용
	// 없으면 새로 생성
	public String updateBoard(@ModelAttribute("board") BoardVO vo, Model model) {
		System.out.println(">> 게시글 수정");
		System.out.println("vo: " + vo);
		
		boardService.updateBoard(vo);
		
		model.addAttribute("board", boardService.getBoard(vo));
		return "getBoard.do"; //@ModelAttribute("board") 이후 에러
		//return "getBoardList.do";
	}
	
	@RequestMapping("/deleteBoard.do")
	public String deleteBoard (BoardVO vo) {
		System.out.println(">> 게시글 삭제");
		boardService.deleteBoard(vo);
		//3. 페이지 전환 (목록 페이지 이동)
		return "getBoardList.do";	
	}
	
}
