package com.spring.biz.board.impl;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import com.spring.biz.board.BoardVO;
import com.spring.biz.common.JDBCUtil;

@Repository
public class BoardDAOSpring {
	
	//@Autowired
	private JdbcTemplate jdbcTemplate;
	
	// SQL문
	private final String BOARD_INSERT
		= "INSERT INTO BOARD (SEQ, TITLE, WRITER, CONTENT) "
		+ "VALUES (?, ?, ?, ?) ";
		//transaction 처리를 위해 오류가 발생할 수 있도록 임의로 문장 수정
//		+ "VALUES ((SELECT NVL(MAX(SEQ),0)+1 FROM BOARD), ?, ?, ?) ";
	
	private final String BOARD_UPDATE 
		= "UPDATE BOARD SET TITLE = ?, CONTENT = ? WHERE SEQ = ?";
	
	private final String BOARD_DELETE
		= "DELETE FROM BOARD WHERE SEQ = ?";
	
	private final String BOARD_GET
		= "SELECT * FROM BOARD WHERE SEQ = ?";
	
	private final String BOARD_LIST
		= "SELECT * FROM BOARD ORDER BY SEQ DESC";
	
	@Autowired
	public BoardDAOSpring (JdbcTemplate jdbcTemplate) {
		System.out.println(">> BoardDAOSpring(jdbcTemplate) 객체 생성");
		this.jdbcTemplate = jdbcTemplate;
	}
	
	//글입력
	public void insertBoard(BoardVO vo) {
		System.out.println("==> Spring JDBC로 insertBoard() 실행");
		
//		Object[] args = {vo.getTitle(), vo.getContent(), vo.getWriter()};
		Object[] args = {vo.getSeq(), vo.getTitle(), vo.getContent(), vo.getWriter()};
		//바인드변수에 넣어 줘야 하는 값들 배열로
		jdbcTemplate.update(BOARD_INSERT, args);
		//insert, update, delete 모두 update() 메소드 사용
	}
	
	//글수정
	public void updateBoard(BoardVO vo) {
		System.out.println("==> Spring JDBC로 updateBoard() 실행");
		
//		Object[] args = {vo.getTitle(), vo.getContent(), vo.getSeq()};
//		//바인드변수에 넣어 줘야 하는 값들 배열로
//		jdbcTemplate.update(BOARD_UPDATE, args);

		jdbcTemplate.update(BOARD_UPDATE, 
				vo.getTitle(), vo.getContent(), vo.getSeq());
		//전달할 파라미터가 많지 않을 경우 배열 대신 순서대로 나열해 줘도 됨
	}

	//글삭제
	public void deleteBoard(BoardVO vo) {
		System.out.println("==> Spring JDBC로 deleteBoard() 실행");
		
		jdbcTemplate.update(BOARD_DELETE, vo.getSeq());
	
	}

	//글조회(1개)
	public BoardVO getBoard(BoardVO vo) {
		System.out.println("==> Spring JDBC로 getBoard() 실행");
		
		Object[] args = {vo.getSeq()};
		//SELECT는 CUD와 조금 다름
		return jdbcTemplate.queryForObject(BOARD_GET, args, new BoardRowMapper());
		// rowMapper 매칭시켜주는 작업을 해 주는 mapper
	}

	//글 목록 조회
	public List<BoardVO> getBoardList() {
		System.out.println("==> Spring JDBC로 getBoardList() 실행");

		//jdbcTemplate.queryForList(BOARD_LIST, new BoardRowMapper());
		return jdbcTemplate.query(BOARD_LIST, new BoardRowMapper());
		//파라미터 나열은 중간에 올 수 없음 끝에만 나열 가능
		//query or queryForList 둘 다 사용 가능
	}
}
